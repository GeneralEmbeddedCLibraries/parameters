////////////////////////////////////////////////////////////////////////////////
/**
*@file      par_cfg.c
*@brief     Configuration for device parameters
*@author    Ziga Miklosic
*@date      22.05.2021
*@version	V1.0.0
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup PAR_CFG
* @{ <!-- BEGIN GROUP -->
*
* 	Configuration for device parameters
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "par_cfg.h"
#include "parameters/src/par.h"


////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

/**
 *	Parameters definitions
 *
 *	@note	User shall fill up wanted parameter definitions!
 */
static const par_cfg_t g_par_table[ePAR_NUM_OF] =
{

	// USER CODE BEGIN...

	//
	//	ID		Name			Min 			Max 			Def 				Unit		Data type		PC Access			Persistent

	{	0, 		"Test_u8", 		.min.u8 = 0,	.max.u8 = 10,	.def.u8 = 0,		"n/a",		ePAR_TYPE_U8,	ePAR_ACCESS_RO, 	false },
	{	1, 		"Test_i8", 		.min.i8 = -10,	.max.i8 = 100,	.def.i8 = 0,		"n/a",		ePAR_TYPE_I8,	ePAR_ACCESS_RW, 	false },

	{	2, 		"Test_u16", 	.min.u16 = 0,	.max.u16 = 10,	.def.u16 = 0,		"n/a",		ePAR_TYPE_U16,	ePAR_ACCESS_RW, 	false },
	{	3, 		"Test_i16", 	.min.i16 = -10,	.max.i16 = 100,	.def.i16 = 0,		"n/a",		ePAR_TYPE_I16,	ePAR_ACCESS_RW, 	false },

	{	4, 		"Test_u32", 	.min.u32 = 0,	.max.u32 = 10,	.def.u32 = 100,		"n/a",		ePAR_TYPE_U32,	ePAR_ACCESS_RW, 	false },
	{	5, 		"Test_i32", 	.min.i32 = -10,	.max.i32 = 100,	.def.i32 = 0,		"n/a",		ePAR_TYPE_I32,	ePAR_ACCESS_RW, 	false },

	{	6, 		"Test_f32", 	.min.f32 = -10,	.max.f32 = 100,	.def.f32 = -12.0,	"n/a",		ePAR_TYPE_F32,	ePAR_ACCESS_RO, 	false },

	{	7, 	"Battery voltage", 	.min.f32 = 0,	.max.f32 = 5,	.def.f32 = 0.0,		"V",		ePAR_TYPE_F32,	ePAR_ACCESS_RO, 	false },
	{	8, 	"System current", 	.min.f32 = 0,	.max.f32 = 10,	.def.f32 = 0.0,		"A",		ePAR_TYPE_F32,	ePAR_ACCESS_RO, 	false },


	// USER CODE END...

};

/**
 * 	Table size in bytes
 */
static const uint32_t gu32_par_table_size = sizeof( g_par_table );

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////


const void * par_cfg_get_table(void)
{
	return (const par_cfg_t*) &g_par_table;
}

uint32_t par_cfg_get_table_size(void)
{
	return gu32_par_table_size;
}


////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
